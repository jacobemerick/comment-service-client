<?php
/**
 * Comment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jacobemerick\CommentService
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jacobemerick\CommentService\Model;

use \ArrayAccess;
/**
 * Comment Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Jacobemerick\CommentService
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Comment implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'commenter' => '\Jacobemerick\CommentService\Model\Commenter',
        'body' => 'string',
        'url' => 'string',
        'thread' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'commenter' => 'commenter',
        'body' => 'body',
        'url' => 'url',
        'thread' => 'thread'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'commenter' => 'setCommenter',
        'body' => 'setBody',
        'url' => 'setUrl',
        'thread' => 'setThread'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'commenter' => 'getCommenter',
        'body' => 'getBody',
        'url' => 'getUrl',
        'thread' => 'getThread'
    );
  
    
    /**
      * $id 
      * @var string
      */
    protected $id;
    
    /**
      * $commenter 
      * @var \Jacobemerick\CommentService\Model\Commenter
      */
    protected $commenter;
    
    /**
      * $body 
      * @var string
      */
    protected $body;
    
    /**
      * $url 
      * @var string
      */
    protected $url;
    
    /**
      * $thread 
      * @var string
      */
    protected $thread;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->commenter = $data["commenter"];
            $this->body = $data["body"];
            $this->url = $data["url"];
            $this->thread = $data["thread"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets commenter
     * @return \Jacobemerick\CommentService\Model\Commenter
     */
    public function getCommenter()
    {
        return $this->commenter;
    }
  
    /**
     * Sets commenter
     * @param \Jacobemerick\CommentService\Model\Commenter $commenter 
     * @return $this
     */
    public function setCommenter($commenter)
    {
        
        $this->commenter = $commenter;
        return $this;
    }
    
    /**
     * Gets body
     * @return string
     */
    public function getBody()
    {
        return $this->body;
    }
  
    /**
     * Sets body
     * @param string $body 
     * @return $this
     */
    public function setBody($body)
    {
        
        $this->body = $body;
        return $this;
    }
    
    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->url;
    }
  
    /**
     * Sets url
     * @param string $url 
     * @return $this
     */
    public function setUrl($url)
    {
        
        $this->url = $url;
        return $this;
    }
    
    /**
     * Gets thread
     * @return string
     */
    public function getThread()
    {
        return $this->thread;
    }
  
    /**
     * Sets thread
     * @param string $thread 
     * @return $this
     */
    public function setThread($thread)
    {
        
        $this->thread = $thread;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
