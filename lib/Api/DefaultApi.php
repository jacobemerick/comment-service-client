<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Jacobemerick\CommentService
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Jacobemerick\CommentService\Api;

use \Jacobemerick\CommentService\Configuration;
use \Jacobemerick\CommentService\ApiClient;
use \Jacobemerick\CommentService\ApiException;
use \Jacobemerick\CommentService\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Jacobemerick\CommentService
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{

    /**
     * API Client
     * @var \Jacobemerick\CommentService\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Jacobemerick\CommentService\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Jacobemerick\CommentService\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Jacobemerick\CommentService\ApiClient $apiClient set the API client
     * @return DefaultApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * getCommenters
     *
     * 
     *
     * @param int $page Results page to return (optional)
     * @param int $per_page Results per response (optional)
     * @return \Jacobemerick\CommentService\Model\Commenter[]
     * @throws \Jacobemerick\CommentService\ApiException on non-2xx response
     */
    public function getCommenters($page = null, $per_page = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getCommentersWithHttpInfo ($page, $per_page);
        return $response; 
    }


    /**
     * getCommentersWithHttpInfo
     *
     * 
     *
     * @param int $page Results page to return (optional)
     * @param int $per_page Results per response (optional)
     * @return Array of \Jacobemerick\CommentService\Model\Commenter[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Jacobemerick\CommentService\ApiException on non-2xx response
     */
    public function getCommentersWithHttpInfo($page = null, $per_page = null)
    {
        
  
        // parse inputs
        $resourcePath = "/commenters";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($per_page !== null) {
            $queryParams['per_page'] = $this->apiClient->getSerializer()->toQueryValue($per_page);
        }
        
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Jacobemerick\CommentService\Model\Commenter[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Jacobemerick\CommentService\Model\Commenter[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Jacobemerick\CommentService\Model\Commenter[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Jacobemerick\CommentService\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getCommenter
     *
     * 
     *
     * @param string $commenter_id Commenter identifier. (required)
     * @return \Jacobemerick\CommentService\Model\Commenter
     * @throws \Jacobemerick\CommentService\ApiException on non-2xx response
     */
    public function getCommenter($commenter_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getCommenterWithHttpInfo ($commenter_id);
        return $response; 
    }


    /**
     * getCommenterWithHttpInfo
     *
     * 
     *
     * @param string $commenter_id Commenter identifier. (required)
     * @return Array of \Jacobemerick\CommentService\Model\Commenter, HTTP status code, HTTP response headers (array of strings)
     * @throws \Jacobemerick\CommentService\ApiException on non-2xx response
     */
    public function getCommenterWithHttpInfo($commenter_id)
    {
        
        // verify the required parameter 'commenter_id' is set
        if ($commenter_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $commenter_id when calling getCommenter');
        }
  
        // parse inputs
        $resourcePath = "/commenters/{commenter_id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($commenter_id !== null) {
            $resourcePath = str_replace(
                "{" . "commenter_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($commenter_id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Jacobemerick\CommentService\Model\Commenter'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Jacobemerick\CommentService\Model\Commenter', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Jacobemerick\CommentService\Model\Commenter', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Jacobemerick\CommentService\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getComments
     *
     * 
     *
     * @param int $page Results page to return (optional)
     * @param int $per_page Results per response (optional)
     * @param string $order Comma-separated list of order options (optional)
     * @param string $domain Domain to restrict comments to (optional)
     * @param string $path Path to restrict comments to (optional)
     * @return \Jacobemerick\CommentService\Model\Comment[]
     * @throws \Jacobemerick\CommentService\ApiException on non-2xx response
     */
    public function getComments($page = null, $per_page = null, $order = null, $domain = null, $path = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getCommentsWithHttpInfo ($page, $per_page, $order, $domain, $path);
        return $response; 
    }


    /**
     * getCommentsWithHttpInfo
     *
     * 
     *
     * @param int $page Results page to return (optional)
     * @param int $per_page Results per response (optional)
     * @param string $order Comma-separated list of order options (optional)
     * @param string $domain Domain to restrict comments to (optional)
     * @param string $path Path to restrict comments to (optional)
     * @return Array of \Jacobemerick\CommentService\Model\Comment[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Jacobemerick\CommentService\ApiException on non-2xx response
     */
    public function getCommentsWithHttpInfo($page = null, $per_page = null, $order = null, $domain = null, $path = null)
    {
        
  
        // parse inputs
        $resourcePath = "/comments";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($per_page !== null) {
            $queryParams['per_page'] = $this->apiClient->getSerializer()->toQueryValue($per_page);
        }// query params
        
        if ($order !== null) {
            $queryParams['order'] = $this->apiClient->getSerializer()->toQueryValue($order);
        }// query params
        
        if ($domain !== null) {
            $queryParams['domain'] = $this->apiClient->getSerializer()->toQueryValue($domain);
        }// query params
        
        if ($path !== null) {
            $queryParams['path'] = $this->apiClient->getSerializer()->toQueryValue($path);
        }
        
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Jacobemerick\CommentService\Model\Comment[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Jacobemerick\CommentService\Model\Comment[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Jacobemerick\CommentService\Model\Comment[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Jacobemerick\CommentService\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createComment
     *
     * 
     *
     * @param \Jacobemerick\CommentService\Model\Body $body  (optional)
     * @return \Jacobemerick\CommentService\Model\Comment
     * @throws \Jacobemerick\CommentService\ApiException on non-2xx response
     */
    public function createComment($body = null)
    {
        list($response, $statusCode, $httpHeader) = $this->createCommentWithHttpInfo ($body);
        return $response; 
    }


    /**
     * createCommentWithHttpInfo
     *
     * 
     *
     * @param \Jacobemerick\CommentService\Model\Body $body  (optional)
     * @return Array of \Jacobemerick\CommentService\Model\Comment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Jacobemerick\CommentService\ApiException on non-2xx response
     */
    public function createCommentWithHttpInfo($body = null)
    {
        
  
        // parse inputs
        $resourcePath = "/comments";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Jacobemerick\CommentService\Model\Comment'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Jacobemerick\CommentService\Model\Comment', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 201:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Jacobemerick\CommentService\Model\Comment', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Jacobemerick\CommentService\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getComment
     *
     * 
     *
     * @param string $comment_id Comment identifier. (required)
     * @return \Jacobemerick\CommentService\Model\Comment
     * @throws \Jacobemerick\CommentService\ApiException on non-2xx response
     */
    public function getComment($comment_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getCommentWithHttpInfo ($comment_id);
        return $response; 
    }


    /**
     * getCommentWithHttpInfo
     *
     * 
     *
     * @param string $comment_id Comment identifier. (required)
     * @return Array of \Jacobemerick\CommentService\Model\Comment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Jacobemerick\CommentService\ApiException on non-2xx response
     */
    public function getCommentWithHttpInfo($comment_id)
    {
        
        // verify the required parameter 'comment_id' is set
        if ($comment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $comment_id when calling getComment');
        }
  
        // parse inputs
        $resourcePath = "/comments/{comment_id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($comment_id !== null) {
            $resourcePath = str_replace(
                "{" . "comment_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($comment_id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Jacobemerick\CommentService\Model\Comment'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Jacobemerick\CommentService\Model\Comment', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Jacobemerick\CommentService\Model\Comment', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Jacobemerick\CommentService\Model\Error', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
